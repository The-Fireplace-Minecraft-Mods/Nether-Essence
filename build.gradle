buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Modmuss50"
            url = "http://maven.modmuss50.me/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'ModsIOUpload:ModsIOUpload:+'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.4"
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'net.cazzar.gradle.modsio'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def getChangelog() {
    try {
        def tag = "git describe --abbrev=0 --tags".execute().text.trim();
        return ("git tag -l -n99999 " + tag).execute().text.trim().replaceFirst(tag, "").replaceAll("(?m)^\\s+", "")
    } catch(Exception e) {
        return ''
    }
}

def getVersionName() {
    try {
        def tmp = "${minecraft_version}-" + ("git describe --tags --dirty=-SNAPSHOT".execute().text.trim().substring(1).replaceFirst("(\\d+)-g[0-9a-f]+", "dev\$1"));

        if (mod_version_postfix.isEmpty())
            return tmp;
        else
            return tmp.replaceFirst("(.+?-[^\\-]+)(-)?", "\$1-${mod_version_postfix}\$2");
    } catch(Exception e) {
        println e
        return 'UNKNOWN-VERSION'
    }
}

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

curseforge {
  apiKey = project.hasProperty("keyStoreAlias")? project.curseForgeApiKey : "empty"
  project {
    id = '238223'
    changelog = file("CHANGELOG.md")
    changelogType = "markdown"
    releaseType = 'release'
    addGameVersion '1.11'
	addGameVersion 'Java 8'

    mainArtifact(jar) {
        displayName = jar.archiveName.replace(".jar", "")
    }
    addArtifact(deobfJar) {
        displayName = deobfJar.archiveName.replace(".jar", "")
        changelog = "*This is a file for mod developers. If you don't know what to do with it, don't use it!*"
    }
    addArtifact(sourceJar) {
        displayName = sourceJar.archiveName.replace(".jar", "")
        changelog = "*This is a file for mod developers. If you don't know what to do with it, don't use it!*"
    }
  }
}

version = getVersionName()
group= "the_fireplace.netheressence"
archivesBaseName = "NetherEssence-Forge"

modsIO {
    key = project.modsioApiKey
    project{
		artifact = new File(jar.destinationDir, archivesBaseName+"-"+version+".jar")
		modid = "1224"
		minecraft = "1.11"
		try{changelog = file('changelog.txt').text}catch(Exception e){changelog=""}
		tag = ""
		current = true
    }
}

minecraft {
    version = "1.11-13.19.0.2130"
    runDir = "run"
    replace '${version}', project.version
    mappings = "snapshot_20161111"
}

dependencies {

}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest commonManifest
}

artifacts {
    archives jar
    archives deobfJar
    archives sourceJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven")) {
                repository(url: "file://${local_maven}")
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging "jar"
                        description "Nether Essence"
                        url "https://github.com/The-Fireplace/Nether-Essence"
                        issueManagement {
                            system "github"
                            url "https://github.com/The-Fireplace/Nether-Essence/issues"
                        }
                        licenses {
                            license {
                                name "License"
                                url "https://github.com/The-Fireplace/Nether-Essence/master/LICENSE"
                                distribution "repo"
                            }
                        }
                        developers {
                            developer {
                                id "fireplace"
                                name "The_Fireplace"
                                roles {
                                    role "owner"
                                    role "developer"
                                }
                            }
                        }
                    }
                }

                // All dependencies are optional!
                pom.whenConfigured {
                    p -> p.dependencies = p.dependencies.findAll {
                        dep -> false
                    }
                }
            }
        }
    }
}

task updateDownloadServer {
    dependsOn jar
    dependsOn deobfJar
    dependsOn sourceJar

    doLast {
        if (!project.hasProperty('secret')) {
            println "Secret needs to be set with the parameter -Psecret=xxx"

            return
        }

        def http = new HTTPBuilder('http://download.brainstonemod.com/')
        http.request( POST ) {
            uri.path = '/admin/new_version.php'
            requestContentType = URLENC
            body = [
                secret: project.secret,
                version: version,
                mc_verion: "1.11",
                changelog: getChangelog(),
                artifacts: JsonOutput.toJson([
                    universal: jar.archivePath.name,
                    (deobfJar.classifier): deobfJar.archivePath.name,
                    (sourceJar.classifier): sourceJar.archivePath.name
                ]),
                "artifact-universal": jar.archivePath.bytes.encodeBase64().toString(),
                ("artifact-" + deobfJar.classifier): deobfJar.archivePath.bytes.encodeBase64().toString(),
                ("artifact-" + sourceJar.classifier): sourceJar.archivePath.bytes.encodeBase64().toString()
            ]

            response.success = { resp, reader ->
                assert resp.status == 200
                println "POST response status: ${resp.statusLine}"
            }
        }
    }
}
